<html
    window-resizable="true"
    window-width="750dip"
    window-height="400dip"
>
<head>
<title>sciter dialogs demo</title>
<style>

@import url(node_modules/sciter-logger/src/logger.css);

body {
    border-spacing: 1em;
}

body:disabled {
    filter: blur(1dip);
    transition-duration: 400ms;
}

plaintext#logger {
    height: *;
}

</style>
<script type="module">

import Logger from "node_modules/sciter-logger/src/logger.js";
import * as Utils from "node_modules/sciter-utils/src/utils.js";

import {dialogs} from "src/dialogs.js";

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

// capture unhandled exceptions
Logger.capture(unhandledExceptionHandler);

document.on("ready", function() {
    // subscribe to logger messages
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.debug(Utils.sciterInfo());

    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // bring window to front and set input focus
    Window.this.activate(true);
});

// set dialog buttons on click event
document.on("click", "button", function(event, element) {
    let result;

    switch (element.id) {
        case "info":
            result = dialogs.show("info", "Widget update successful.", "ok");
            break;

        case "error":
            result = dialogs.show("error", "Widget failed with error 18.", "ok help[https://duckduckgo.com]");
            break;

        case "warning":
            result = dialogs.show("warning", "Widget could not be updated.\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", "ok info[https://yandex.ru]");
            break;

        case "question":
            result = dialogs.show("question", "Do you want to update widget?", "yes no cancel");
            break;

        case "input":
            let options = {
                input: {
                    value: "user1",
                    placeholder: "Enter the text",
                }
            };

            result = dialogs.show("input", "Please enter user name", "ok cancel", options);

            if (result && result === "ok")
                console.log("input value:", options.input.value);

            break;

        case "callback":
            result = dialogs.show("info", "The callback can be used to translate the dialog elements.", "ok", {
                callback: dialogCallback
            });
            break;

        case "css":
            result = dialogs.show("info", "Widget update successful.", "ok", {
                css: [
                    __DIR__ + "src/dialog-win.css",
                    __DIR__ + "css/test.css",
                ],
            });
            break;

        case "options":
            // options that apply to all dialogs
            dialogs.setOptions({
                debugging: true,
                logging: true,
                callback: dialogCallback,
                css: [
                    __DIR__ + "src/dialog-win.css",
                    __DIR__ + "css/test.css",
                ],
                disable: document.$("body"), // causes warning dialog height issue
                openLink: openLinkOverride,
            });
            break;

        case "reset":
            dialogs.setOptions({});
            break;

        default:
            console.error(`unknown element ${element.id}`);
            break;
    }

    if (result)
        console.log("return value:", result);
});

/**
 * Dialog callback
 * @param DOMElement root
 * @return void
 */
function dialogCallback(root)
{
    console.debug("dialog callback reached");

    // get all dialog elements to translate
    root.$$("[data-i18n]").forEach(function(element) {
        element.innerText += " (i18n)";
    });
}

function openLinkOverride(link)
{
    console.log(`open link override - ${link}`);
}

/**
 * Unhandled exception handler
 * @param  Error|String e
 * @return void
 */
function unhandledExceptionHandler(e)
{
    // log exception using exception if it exists, error otherwise
    typeof console.exception === "function" ? console.exception(e) : console.error(e);
}

</script>
</head>
<body>
    <button #info>info</button>
    <button #error>error</button>
    <button #warning>warning</button>
    <button #question>question</button>
    <button #input>input</button>
    <button #callback>callback</button>
    <button #css>custom css</button>
    <button #options>options for all</button>
    <button #reset>options for none</button>
    <plaintext #logger readonly />
</body>
</html>

<html
    window-frame="solid"
    window-state="hidden"
>
<head>
<script type="module">

import {launch, PLATFORM} from "@env";

// get parent window console
console = Window.this.parent.document.globalThis.console;

let params;

//console.debug(`Window.WINDOW_SHOWN - ${Window.WINDOW_SHOWN}`); // 1
//console.debug(`Window.WINDOW_HIDDEN - ${Window.WINDOW_HIDDEN}`); // 4
//console.line();

// hidden
//console.debug(`before ready window state - ${Window.this.state}`);

// https://sciter.com/forums/topic/modal-window-window-state/#post-73646
document.ready = function() {
    try {
        // hidden
        //console.debug(`after ready window state - ${Window.this.state}`);
        const timer = new Date();

        // add fontawesome css
        const url = __DIR__.includes("node_modules") ? "../../sciter-fontawesome/src/fontawesome.css" : "../../sciter-fontawesome/src/fontawesome.css";

        //console.debug(url);

        document.head.insertAdjacentHTML("beforeend", `<style src="${url}" />`);

        // get parameters
        params = Window.this.parameters;

        if (typeof params === "undefined"
            || typeof params.type === "undefined"
            || typeof params.message === "undefined"
            || typeof params.buttons === "undefined"
        )
            console.error("dialog - missing parameters");

        if (typeof params.options !== "undefined" && typeof params.options.css !== "undefined") {
            // inject custom css
            let urls = [];

            if (typeof params.options.css === "string")
                urls[0] = params.options.css;
            else
                urls = params.options.css;

            for (const url of urls)
                document.head.insertAdjacentHTML("beforeend", `<style src="${url}" />`);
        }
        else {
            // inject default css
            let urls = {
                Windows: [
                    "dialog-win.css",
                ],
                OSX: [
                    //"dialog-osx.css", ONCE IMPLEMENTED
                    "dialog-win.css",
                ],
            };

            // pick css for platform
            urls = urls[PLATFORM] || urls.Windows;

            for (const url of urls)
                document.head.insertAdjacentHTML("beforeend", `<style src="${__DIR__ + url}" />`);
        }

        // disable button so it cannot be clicked again while the dialog is shown
        if (typeof params.options !== "undefined" && typeof params.options.disable !== "undefined")
            params.options.disable.disabled = true;

        let title;
        let icon;

        switch (params.type) {
            case "info":
                title = "Information";
                icon = "fas fa-info-circle";
                break;

            case "error":
                title = "Error";
                icon = "fas fa-times-circle";
                break;

            case "warning":
                title = "Warning";
                icon = "fas fa-exclamation-circle";
                break;

            case "question":
                title = "Question";
                icon = "fas fa-question-circle";
                break;

            case "input":
                title = "Enter";
                icon = "fas fa-question-circle";
                break;

            default:
                console.error(`dialog - unknown type - ${params.type}`);
        }

        // set icon in header
        document.$("header > i").classList.add(icon);
        document.$("header > i").id = params.type;

        // set icon in main
        document.$("main > i").classList.add(icon);
        document.$("main > i").id = params.type;

        // set title
        document.$("header > span").textContent = title;
        document.$("header > span").setAttribute("data-i18n", `dialogs:${title}`);

        // set message
        document.$("#message").textContent = params.message;

        // set input
        if (params.type === "input") {
            // hide main icon
            document.$("main > i").style.display = "none";

            if (!params.options.input) {
                // create input
                params.options.input = {
                    value: "",
                    placeholder: "",
                };

                console.debug(params);
            }
            else {
                // set input content
                if (params.options.input.value)
                    document.$("input").value = params.options.input.value;

                if (params.options.input.placeholder)
                    document.$("input").placeholder = params.options.input.placeholder;
            }

            // show input
            document.$("input").style.display = "block";
        }

        // add buttons
        addButtons(params.buttons);

        if (params.type !== "input") {
            // set tab focus on the first button
            document.$("footer > button").state.tabfocus = true;

            // set focus on the first button
            document.$("footer > button").state.focus = true;
        }

        // log message
        if (params.options && params.options.logging)
            // get rid of message new lines for logging
            console.log(`dialog - message - "${params.message.replaceAll("\r\n", " ")}"`);

        // call callback if set
        if (typeof params.options !== "undefined" && typeof params.options.callback === "function")
            params.options.callback(document);

        if (params.options && params.options.debugging)
            console.debug(`total time ${Date.now() - timer}ms`);
    }
    catch (error) {
        console.error("dialog - exception", error);
    }
};

/**
 * Add buttons
 * @param {string} buttons - separated by space
 */
function addButtons(buttons) {
    const list = buttons.split(" ");

    const buttons2 = list.map(function(string_) {
        // get button id and link
        let [, id, link] = string_.match(/([a-z]*)(?:\[(.*)])?/);

        // make sure link is not undefined
        link = link ?? "";

        const caption = (id === "ok") ? id.toUpperCase() : capitalizeFirstLetter(id);

        const i18n = `dialogs:${id}`;

        // create button JSX
        return (
            <button id={id} href={link} data-i18n={i18n}>{caption}</button>
        );
    });

    // add buttons to footer
    document.$("footer").patch(buttons2);
}

/**
 * Capitalize first letter
 * @param {string} string_
 * @returns {string}
 */
function capitalizeFirstLetter(string_) {
    return string_.charAt(0).toUpperCase() + string_.slice(1);
}

// on button click event
document.on("click", "button", function(event, button) {
    const link = button.getAttribute("href");

    if (link.length > 0) {
        // open link in browser
        if (params.options && params.options.logging)
            console.log(`dialog - open link - ${link}`);

        // open link can be overriden
        if (params.options && typeof params.options.openLink === "function")
            params.options.openLink(link);
        else
            launch(link);

        return;
    }

    close(button.id, false);
});

document.on("click", "window-button", function(event) {
    // stop window from closing
    event.stopPropagation();

    // closing the window using the close button is considered like pressing escape key
    document.dispatchEvent(new Event("keyup", {code: "KeyESCAPE"}));
});

// on escape key press
document.on("keyup", function(event) {
    if (!["KeyESCAPE", "KeyRETURN"].includes(event.code))
        return;

    // get buttons
    const buttons = document.$$("button");

    // if there's a single button, return its id
    if (buttons.length === 1) {
        close(buttons[0].id, true);
        return;
    }

    // get button ids
    const ids = new Set(buttons.map(function(button) {
        return button.id;
    }));

    if (event.code === "KeyESCAPE") {
        if (ids.has("cancel"))
            close("cancel", true);
        else
        if (ids.has("no"))
            close("no", true);
        else
        if (ids.has("ok"))
            close("ok", true);
        else
        if (ids.has("yes"))
            close("yes", true);
    }
    else if (ids.has("ok"))
        close("ok", true);
    else
    if (ids.has("yes"))
        close("yes", true);
    else
    if (ids.has("cancel"))
        close("cancel", true);
    else
    if (ids.has("no"))
        close("no", true);
});

/**
 * Close dialog window
 * @param {string} id - button id
 * @param {boolean} key - pressed (if not click)
 */
function close(id, key) {
    // save input value
    if (params.type === "input")
        params.options.input.value = document.$("input").value;

    // close modal window and return button id
    if (params.options && params.options.logging) {
        if (key)
            console.log(`dialog - key "${id}"`);
        else
            console.log(`dialog - clicked "${id}"`);

        // log input value
        if (params.type === "input")
            console.log(params.options.input.value);
    }

    Window.this.close(id);
}

// on close dialog window
document.on("close", function() {
    // re-enable buttons on main interface
    if (typeof params.options !== "undefined" && typeof params.options.disable !== "undefined")
        params.options.disable.disabled = false;
});

</script>
</head>
<body>
    <header roLe="window-caption">
        <i class="" />
        <span data-i18n />
        <window-button #close role="window-close" />
    </header>
    <main>
        <i class="" />
        <div .vbox>
            <span #message />
            <input type="text" value="" placeholder="" data-i18n />
        </div>
    </main>
    <footer />
</body>
</html>

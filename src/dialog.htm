<html window-frame="solid">
<head>
<style src="../../sciter-fontawesome/src/css/fontawesome.css" />

<script type="module">

import {launch, PLATFORM} from "@env";
import * as sys from "@sys";

// get parameters
const params = Window.this.parameters;

if (typeof params === "undefined" ||
    typeof params.type === "undefined" ||
    typeof params.message === "undefined" ||
    typeof params.buttons === "undefined"
) {
    console.error("dialog - missing parameters");
}

document.on("ready", function() {
    let title;
    let icon;

    switch (params.type) {
        case "info":
            title = "Information";
            icon  = "fas fa-info-circle";
            break;

        case "error":
            title = "Error";
            icon  = "fas fa-times-circle";
            break;

        case "warning":
            title = "Warning";
            icon  = "fas fa-exclamation-circle";
            break;

        case "question":
            title = "Question";
            icon  = "fas fa-question-circle";
            break;

        default:
            console.error(`dialog - unknown type - ${params.type}`);
    }

    if (typeof params.options !== "undefined" && typeof params.options.css !== "undefined") {
        // inject custom css
        let files = [];

        if (typeof params.options.css === "string")
            files[0] = params.options.css;
        else
            files = params.options.css;

        files.forEach(function(file) {
            file = sys.cwd() + "\\" + file;
            document.head.insertAdjacentHTML('beforeend', `<style src="${file}" />`);
        });
    }
    else {
        // inject default css
        let files = {
            Windows: [
                "dialog.css",
                "dialog-win.css",
            ],
            OSX: [
                "dialog.css",
                "dialog-osx.css",
            ]
        };

        // pick css for platform
        files = files[PLATFORM] || files["Windows"];

        files.forEach(function(file) {
            document.head.insertAdjacentHTML('beforeend', `<style src="${file}" />`);
        });
    }

    // set icon in header
    document.$("header > i").classList.add(icon);
    document.$("header > i").setAttribute("id", params.type);

    // set icon in main
    document.$("main > i").classList.add(icon);
    document.$("main > i").setAttribute("id", params.type);

    // set title
    document.$("header > span").innerHTML = title;

    // set message
    document.$("#message").innerHTML = params.message;

    // add buttons
    addButtons(params.buttons);

    // call callback if set
    if (typeof params.options !== "undefined" && typeof params.options.callback === "function")
        params.options.callback(document);

    // center dialog in parent
    center();

    // show dialog
    //Window.this.state = Window.WINDOW_SHOWN;
});

/**
 * Add buttons
 * @param string buttons separated by space
 * @return void
 */
function addButtons(buttons)
{
    const list = buttons.split(" ");

    let buttons2 = list.map(function(str) {
        let caption;

        if (str.startsWith("help") && str.indexOf("[") > 0) {
            caption = "Help";

            const link = str.match(/\[(.*)\]/);

            // JSX button
            return (
                <button #help data-i18n href={link[1]}>{caption}</button>
            );
        }

        if (str === "ok")
            caption = str.toUpperCase();

        else
            caption = capitalizeFirstLetter(str);

        // JSX button
        return (
            <button id={str} data-i18n>{caption}</button>
        );
    });

    // add buttons to footer
    document.$("footer").patch(buttons2);

    // set tab focus on the first button
    document.$("footer > button").state.tabfocus = true;

    // set focus on the first button
    document.$("footer > button").state.focus = true;
}

/**
 * Capitalize first letter
 * @param string str
 * @return string
 */
function capitalizeFirstLetter(str)
{
    return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * Center dialog in parent window
 * @return void
 */
function center()
{
    // get parent window dimensions
    const [sx, sy, sw, sh] = Window.this.parent.box("rectw", "border", "screen")

    //console.log(`${sx} ${sy} ${sw} ${sh}`)

    // get this window dimensions with border
    const [wx, wy, ww, wh] = Window.this.box("rectw", "border", "screen");

    //console.log(`${wx} ${wy} ${ww} ${wh}`)

    // calculate position
    const left = sx + (sw - ww) / 2;
    const top  = sy + (sh - wh) / 2;

    // move window
    Window.this.move(left, top, ww, wh);
}

// button click event
document.on("click", "button", function(event, button) {
    switch (button.id) {
        case "help":
            const link = button.getAttribute("href");

            if (link.length > 0)
                launch(link);
            break;

        default:
            // close window and return button id
            Window.this.close(button.id);
            break;
    }
});

</script>
</head>
<body>
    <header roLe="window-caption">
        <i class="" />
        <span data-i18n />
        <window-button #close role="window-close" />
    </header>
    <main>
        <i class="" />
        <span #message />
    </main>
    <footer />
</body>
</html>
